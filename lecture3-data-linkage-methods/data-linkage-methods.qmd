---
format: 
  revealjs:
    theme: [simple, ../../day2/lecture3-reading-in-data/custom.scss]
    highlight: pygments
    logo: images/id529-sticker.png
    slide-number: true
    footer: "<https://id529.github.io/>"
execute: 
  echo: true
---

# Introduction to Data Linkage {.white-title .white-code background-image="images/bg-no-planet.png" background-size="110%"}

::: {.white-15-pt}
ID 529: Data Management and Analytic Workflows in R
:::

::: {.white-12-pt}
Dean Marengi \| Friday, January 12<sup>th</sup>, 2024
:::

## Motivation {.smaller}

<br>

-   **We've discussed:**
    -   [Data manipulation]{.blue-bold} using `dplyr` 
    -   [Leveraging `tidyverse` packages]{.blue-bold} to work with specific types of data
        -   Numeric, factors, text strings, dates/times, etc.

<br>

-   **However, we've only considered data manipulation in the context of individual datasets**
    -   We are often interested in combining data from multiple different files or sources
    -   Need tools that help us work with and combine multiple datasets
  

## Learning objectives {.smaller}

<br>

-   **Understand the basic principles of data linkage**
    -   Common methods implemented for joining datasets
    -   How methods differ, and why these differences should inform your approach
    
<br>

-  **Learn about different R functions available for data linkage**
    -   `dplyr` two-table verbs 

<br>

-  **Learn how to implement `dplyr` two-table verbs to link datasets**
    -   Mutating joins
    -   Filtering joins
    -   Set operations

# Background {.white-title .white-code background-image="images/bg-no-planet.png" background-size="110%"}

## Why do we need data linkage? {.smaller}

<br>

:::: {.columns}
::: {.column width=55%}

:::{.small-break}
:::

-   It's rare that all the data we need for an analysis are contained within a single file

:::{.small-break}
:::

-   Often interested in combining data across two or more files or sources

:::{.small-break}
:::

-   For example, NHANES generates a number of datasets for each survey cycle
    -   Separate files for demographics, clinical exams, laboratory tests, questionnaires, etc.
    -   Participant data from a given survey cycle must be linked across multiple datasets with a unique identifier
    -   [This is how the `ID529data::nhanes_id529` dataset was created!]{.blue-bold}

:::

::: {.column width=45%}

```{r, echo=FALSE, R.options=list(width=50)}
library(nhanesA)
library(tidyverse)
as_tibble(nhanesTables(c("EXAM"), 2018))

```

:::{.code-break}
:::

```{r, echo=FALSE, R.options=list(width=50)}
as_tibble(nhanesTables(c("DIET"), 2018))
```

:::
::::

## How do we link datasets together in R? {.smaller}

-   **There are many R functions that allow us to link data**
    -   `base R` includes the `merge()`, `rbind()`, `cbind()` functions
    -   `dplyr` has many functions (verbs) for performing two-table operations 

<br>

-   **We will focus on `dplyr`**
    -   `dplyr` functions tend to be more consistent, and intuitive to implement
    -   Can be combined into chained data manipulation sequences (`%>%`)
    -   Also offers additional types of joins such as semi-joins and anti-joins

## `dplyr` two table verbs {.smaller}

<br>

**[Three classes]{.blue-bold} of `dplyr` verbs that work with two tables at a time**

-   **Mutating joins**
    -   **Combine variables** from multiple tables
    -   Adds new columns to one table with matched rows from another table
    -   **Two types:**
        -   **Inner join:** `inner_join()` 
        -   **Outer joins:** `left_join()`, `right_join()`, `full_join()`

:::{.small-break}
:::

-   **Filtering joins**
    -   **Filter rows** from one table if they match a row in a second table
        -   Unmatched rows are discarded if join condition is not met
    -   Great tools for identifying row mismatches between tables
    -   `semi_join()`, `anti_join`


![](images/hex-dplyr.png){.absolute right="0" bottom="1" height="30%"}

::: aside
<https://dplyr.tidyverse.org/articles/two-table.html> <br>
:::

## `dplyr` two table verbs (cont.) {.smaller}

:::{.small-break}
:::

-   [Set operations]{.blue-bold}
    -   Combine observations from two datasets, but treats observations as set elements
    -   `intersect()`, `union()`, `setdiff()`

![](images/hex-dplyr.png){.absolute right="0" bottom="1" height="30%"}

## Example dataset {.smaller}

:::: {.columns}
::: {.column width=50%}
**Overview**

-   `NHANES` dataset available on the ID529 GitHub
-   The dataset includes individual-level:
    -   Demographic and clinical characteristics
    -   Socioeconomic parameters 
    -   Blood measures of PFAS/PFOA
    -   Dietary intake parameters
  
::: {.small-break}
:::

-   **For our examples, we will split these data into smaller datasets that each contain different variables,  identifiers, and number of observations.**
    -   **clinical:** `id1`, `age`, `race_eth`, `sbp`, `ht`, `wt`
    -   **pfas:** `id1`, `pfos`, `pfoa`, `pfna`, `pfhs`, `pfde`
    <!-- -   **poverty:** `id2`, `pov_ratio` -->
    <!-- -   **crosswalk:** `id1`, `id2` -->
:::

::: {.column width=50%}
```{r, echo=F}
# Load libraries
library(tidyverse)
library(ID529data)

# Load ID 529 NHANES data 
data(nhanes_id529, package = 'ID529data')

# Create new ID  variables for examples
nhanes <- nhanes_id529 %>% 
  arrange(id) %>% 
  mutate(id1 = id,
         id2 = paste0("NH", seq(1:nrow(.)) + 2 * 10^4)) %>% 
  select(matches("id"), everything()) %>% 
  as_tibble()

```


```{r, echo=T}
# Create demog/clincal characteristics table (id1)
clinical <- nhanes %>%
  rename(race_eth = race_ethnicity,
         sbp = mean_BP, 
         ht = height,
         wt = weight) %>%
  select(id1, age, race_eth, sbp:ht)
  
# Create pfas data table (id1)
pfas <- nhanes %>% 
  select(id1, PFOS:PFDE) %>% 
  rename_with(~ str_to_lower(.)) %>%
  filter(rowSums(is.na(.)) < 5)

```

<!-- # ```{r} -->
<!-- #  -->
<!-- # # Create poverty index table (id2) -->
<!-- # poverty <- nhanes %>%  -->
<!-- #   rename(pov_ratio = poverty_ratio) %>%  -->
<!-- #   filter(!is.na(pov_ratio)) %>% -->
<!-- #   select(id2, pov_ratio) -->
<!-- #    -->
<!-- # # Create ID crosswalk table (id1 and id2) -->
<!-- # crosswalk <- select(nhanes, id1, id2) -->
<!-- # ``` -->

::: aside
<https://github.com/ID529/ID529data>
:::

:::
::::

## Example dataset {.smaller}

```{r, echo=T}
# Demographic and clinical characteristics
clinical

# PFAS data filtered for obs with data
pfas
```

<!-- ```{r, echo=F, eval=F} -->
<!-- # Poverty data filtered for obs with data -->
<!-- poverty -->

<!-- # Table with both ID variables -->
<!-- crosswalk -->
<!-- ``` -->


# `dplyr` mutating joins {.white-title .white-code background-image="images/bg-no-planet.png" background-size="110%"}

## `dplyr::left_join()` {.smaller}

:::: {.columns}
::: {.column width="45%"}
**Main arguments**

```{r, echo=T, eval=F}
left_join(
  x,
  y,
  by = NULL,
  suffix = c(".x", ".y"),
  keep = FALSE
)
```

-   `x` = Data frame 1 (left table)
-   `y` = Data frame 2 (right table)
-   `by` = Column names(s) of variables to match rows by (key)
-   `suffix` = Character string appended to column names that appear in both `x` and `y`
-   `keep`= If `TRUE`, preserve the join keys from both `x` and `y`
::: 

::: {.column width="5%"}
<br>
:::

::: {.column width="50%"}
**Description**

-   Adds columns from `y` (right table) to `x` (left table) 
-   All rows from `x` are preserved in the join
    -   i.e., keeps all rows from `x` regardless of whether there's a match in `y`
-   Of the joins, used most frequently
    -   Allow you to add new variables from other tables without dropping observations

:::
::::

![](images/left-join.gif){.absolute right="7%" bottom="0%" height="40%"}

::: aside
Gif Source: <https://github.com/gadenbuie/tidyexplain>
:::

## `dplyr::left_join()` example {.smaller}
:::: {.columns}
::: {.column width="50%"}

```{r}
# Print clinical dataset
clinical
```

::: {.code-break}
:::

```{r}
# Print PFAS dataset
pfas
```

:::
::::

:::: {.columns}
::: {.column width="50%"}
```{r, R.options=list(width=50)}
# Perform a left join
left_join(x = clinical, y = pfas, by = "id1")
```

:::
::::

## `dplyr::right_join()` {.smaller}

:::: {.columns}
::: {.column width="45%"}
**Main arguments**

```{r, echo=T, eval=F}
right_join(
  x,
  y,
  by = NULL,
  suffix = c(".x", ".y"),
  keep = FALSE
)

```

-   `x` = Data frame 1 (left table)
-   `y` = Data frame 2 (right table)
-   `by` = Column names(s) of variables to match rows by (key)
-   `suffix` = Character string appended to column names that appear in both `x` and `y`
-   `keep`= If `TRUE`, preserve the join keys from both `x` and `y`
::: 

::: {.column width="5%"}
<br>
:::

::: {.column width="50%"}
**Description**

-   Adds columns from `x` (left table) to `y` (right table) 
-   All rows from `y` are preserved in the join
    -   i.e., keeps all rows from `y` regardless of whether there's a match in `x`

:::
::::

![](images/right-join.gif){.absolute right="7%" bottom="0%" height="45%"}

::: aside
Gif Source: <https://github.com/gadenbuie/tidyexplain>
:::

## `dplyr::right_join()` example {.smaller}
:::: {.columns}
::: {.column width="50%"}

```{r}
# Print clincal dataset
clinical
```

::: {.code-break}
:::

```{r}
# Print PFAS dataset
pfas
```

:::
::::

:::: {.columns}
::: {.column width="50%"}
```{r, R.options=list(width=50)}
right_join(x = clinical, y = pfas, by = "id1")
```

:::
::::


## `dplyr::inner_join()` {.smaller}

:::: {.columns}
::: {.column width="45%"}
**Main arguments**

```{r, echo=T, eval=F}
inner_join(
  x,
  y,
  by = NULL,
  copy = FALSE,
  suffix = c(".x", ".y"),
  ...,
  keep = FALSE
)
```

-   `x` = Data frame `x`
-   `y` = Data frame `y`
-   `by`= Column name(s) to join `x` and `y` by
-   `suffix`= Suffix to append to duplicate vars
-   `keep`= Keep the join key from both `x` and `y`
::: 

::: {.column width="5%"}
<br>
:::

::: {.column width="50%"}
**Description**

-   Returns rows that match in **both** `x` and `y`
    -   Unmatched rows are dropped
-   Most restrictive of the mutating joins   

:::
::::

![](images/inner-join.gif){.absolute right="7%" bottom="0%" height="45%"}

::: aside
Gif Source: <https://github.com/gadenbuie/tidyexplain>
:::

## `dplyr::inner_join()` example {.smaller}
:::: {.columns}
::: {.column width="50%"}

```{r}
# Print clinical dataset
clinical
```

::: {.code-break}
:::

```{r}
# Print PFAS dataset
pfas
```

:::
::::

:::: {.columns}
::: {.column width="50%"}
```{r, R.options=list(width=50)}
# Perform an inner join
inner_join(x = clinical, y = pfas, by = "id1")
```
:::
::::

## `dplyr::full_join()` {.smaller}

:::: {.columns}
::: {.column width="45%"}
**Main arguments**

```{r, echo=T, eval=F}
full_join(
  x,
  y,
  by = NULL,
  suffix = c(".x", ".y"),
  keep = FALSE
)
```

-   `x` = Data frame `x`
-   `y` = Data frame `y`
-   `by`= Column name(s) to join `x` and `y` by
-   `suffix`= Suffix to append to duplicate vars
-   `keep`= Keep the join key from both `x` and `y`

::: 

::: {.column width="5%"}
<br>
:::

::: {.column width="50%"}
**Description**

-   Returns all rows in x or y
-   Least restrictive
    -   No observations are removed

:::
::::

![](images/full-join.gif){.absolute right="7%" bottom="0%" height="45%"}

::: aside
Gif Source: <https://github.com/gadenbuie/tidyexplain>
:::


## `dplyr::full_join()` example {.smaller}
:::: {.columns}
::: {.column width="50%"}

```{r}
# Print clinical datast
clinical
```

::: {.code-break}
:::

```{r}
# Print PFAS dataset
pfas
```

:::
::::

:::: {.columns}
::: {.column width="50%"}
```{r, R.options=list(width=50)}
# Perform full join
full_join(x = clinical, y = pfas, by = "id1")
```

:::
::::

# `dplyr` filtering joins {.white-title .white-code background-image="images/bg-no-planet.png" background-size="110%"}

## `dplyr::semi_join()` {.smaller}

:::: {.columns}
::: {.column width="45%"}

**Main arguments**

```{r, echo=T, eval=F}
semi_join(x, 
          y, 
          by = NULL,
)
```

-   `x` = Data frame 1 (left)
-   `y` = Data frame 2 (right)
-   `by` = Column names(s) of variables to match rows by (key)
::: 

::: {.column width="5%"}
<br>
:::

::: {.column width="50%"}
**Description**

-   Keeps all observations in x that have a match in y
-   Useful for filtering `x` by the presence of a match in `y`
:::
::::

![](images/semi-join.gif){.absolute right="7%" bottom="0%" height="45%"}

::: aside
Gif Source: <https://github.com/gadenbuie/tidyexplain>
:::

## `dplyr::anti_join()` {.smaller}

:::: {.columns}
::: {.column width="45%"}

**Main arguments**

```{r, echo=T, eval=F}
anti_join(x, 
          y 
          by = NULL
)
```

-   `x` = Data frame 1 (left)
-   `y` = Data frame 2 (right)
-   `by` = Column names(s) of variables to match rows by (key)

::: 

::: {.column width="5%"}
<br>
:::

::: {.column width="50%"}
**Description**

-   Returns rows from `x` where there is no match in `y` 
-   Useful when you want to filter the first table by the absence of a match in the second table
    -   That is, identify observations in `x` that don't appear in `y`   
:::
::::

![](images/anti-join.gif){.absolute right="7%" bottom="0%" height="45%"}

::: aside
Gif Source: <https://github.com/gadenbuie/tidyexplain>
:::

# `dplyr` set operations {.white-title .white-code background-image="images/bg-no-planet.png" background-size="110%"}

<!-- ## `dplyr::intersect()` {.smaller} -->

<!-- :::: {.columns} -->
<!-- ::: {.column width="45%"} -->

<!-- **Main arguments** -->

<!-- ```{r, echo=T, eval=F} -->
<!-- intersect(x, y, ...) -->
<!-- ``` -->

<!-- -   `x` = text -->
<!-- -   `y` = text -->
<!-- -   `...`= text -->
<!-- :::  -->

<!-- ::: {.column width="5%"} -->
<!-- <br> -->
<!-- ::: -->

<!-- ::: {.column width="50%"} -->
<!-- **Description** -->

<!-- -   Returns only the rows that are in both tables -->

<!-- ::: -->
<!-- :::: -->

<!-- ![](images/intersect.gif){.absolute right="7%" bottom="0%" height="45%"} -->

<!-- ::: aside -->
<!-- Gif Source: <https://github.com/gadenbuie/tidyexplain> -->
<!-- ::: -->


## `dplyr::union()` {.smaller}

:::: {.columns}
::: {.column width="45%"}

**Main arguments**

```{r, echo=T, eval=F}
union(x, y)
union_all(x, y)
```

-   `x` = Data frame 1 (left)
-   `y` = Data frame 2 (right)

::: 

::: {.column width="5%"}
<br>
:::

::: {.column width="50%"}
**Description**

-   `union()` 
    -   Return unique observations in `x` and `y`
-   `union_all()`
    -   Return unique and duplicate observations in `x` and `y`   
:::
::::

![](images/union.gif){.absolute left="7%" bottom="0%" height="45%"}

![](images/union-all.gif){.absolute right="7%" bottom="0%" height="45%"}

::: aside
Gif Source: <https://github.com/gadenbuie/tidyexplain>
:::

## `dplyr::setdiff()` {.smaller}

:::: {.columns}
::: {.column width="45%"}

**Main arguments**

```{r, echo=T, eval=F}
setdiff(x, y, ...)
```

-   `x` = Data frame 1 (left)
-   `y` = Data frame 2 (right)
::: 

::: {.column width="5%"}
<br>
:::

::: {.column width="50%"}
**Description**

-   Returns the rows that are in the first table but not in the second
    -   That is, return observations in x, but not in y

:::
::::

![](images/set-diff-rev.gif){.absolute right="7%" bottom="0%" height="45%"}

::: aside
Gif Source: <https://github.com/gadenbuie/tidyexplain>
:::


## Key takeaways {.smaller}

-   **Joining together two or more datasets is a routine component of data analysis workflows**
    -   Different types of joins are useful in different situations
    -   It's important to be aware of how and when to use each (left, right, inner, etc.)
        -   All have distinct implications for how the underlying data are manipulated

::: {.small-break}
:::

-   Like all data manipulation tasks, joining data can get complicated! 
-   **Common challenges include:**
    -   Inconsistencies in unique identifiers
    -   Duplicate records and missing values
    -   Non-unique identifiers (require matching data frames on two or more variables)
    -   Joining datasets can be complex and requires a good understanding of the data structure
    
::: {.small-break}
:::

-   **`dplyr` includes a number of two-table functions (verbs)**
    -   Like other `dplyr` verbs, two-table verbs are: 
        -   Intuitive to use
        -   Can be incorporated into a sequence of data cleaning operations using the pipe operator

## Resources {.smaller}

<br> <br> 

- **`dplyr` Two-table verbs vignette:** <https://dplyr.tidyverse.org/articles/two-table.html>

::: {.small-break}
:::

-   **R for Data Science - Relational Data:** <https://r4ds.had.co.nz/relational-data.html>

## Activity {.smaller}

<br> <br> <br>

-   **Download R Script file here:** <https://github.com/ID529/lectures2024/blob/master/day5/lecture3-data-linkage-methods/nhanes-activity.R>
    -   `nhanes-activity.R`

<br>

-   **ID 529 dataset details:** <https://github.com/ID529/ID529data>
  